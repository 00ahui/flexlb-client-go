// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instance Instance
//
// swagger:model Instance
type Instance struct {

	// config
	// Required: true
	Config *InstanceConfig `json:"config"`

	// Instance ID
	// Required: true
	// Maximum: 255
	// Minimum: 0
	ID uint8 `json:"id"`

	// Instance status
	// Required: true
	// Enum: [up down pending]
	Status string `json:"status"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateConfig(formats strfmt.Registry) error {

	if err := validate.Required("config", "body", m.Config); err != nil {
		return err
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", uint8(m.ID)); err != nil {
		return err
	}

	if err := validate.MinimumUint("id", "body", uint64(m.ID), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumUint("id", "body", uint64(m.ID), 255, false); err != nil {
		return err
	}

	return nil
}

var instanceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["up","down","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceTypeStatusPropEnum = append(instanceTypeStatusPropEnum, v)
	}
}

const (

	// InstanceStatusUp captures enum value "up"
	InstanceStatusUp string = "up"

	// InstanceStatusDown captures enum value "down"
	InstanceStatusDown string = "down"

	// InstanceStatusPending captures enum value "pending"
	InstanceStatusPending string = "pending"
)

// prop value enum
func (m *Instance) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, instanceTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Instance) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this instance based on the context it is used
func (m *Instance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
